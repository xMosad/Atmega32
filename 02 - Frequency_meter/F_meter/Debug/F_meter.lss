
F_meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000037a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800068  00800068  00000416  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee6  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077a  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f9  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040a  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fa  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  8a:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <send_enable>:
	column--;
	send_command((0x80 + 0x40 * row)+ column );
	_delay_ms(1);
	send_data(out_char);
	_delay_ms(1);
}
  92:	a8 9a       	sbi	0x15, 0	; 21
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <send_enable+0x4>
  9a:	00 00       	nop
  9c:	a8 98       	cbi	0x15, 0	; 21
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <send_enable+0xe>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <send_command>:
  a8:	a9 98       	cbi	0x15, 1	; 21
  aa:	12 ba       	out	0x12, r1	; 18
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  b2:	08 95       	ret

000000b4 <send_data>:
  b4:	a9 9a       	sbi	0x15, 1	; 21
  b6:	12 ba       	out	0x12, r1	; 18
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  be:	08 95       	ret

000000c0 <Lcd_Init>:
  c0:	a1 9a       	sbi	0x14, 1	; 20
  c2:	a0 9a       	sbi	0x14, 0	; 20
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	81 bb       	out	0x11, r24	; 17
  c8:	a9 98       	cbi	0x15, 1	; 21
  ca:	a8 98       	cbi	0x15, 0	; 21
  cc:	12 ba       	out	0x12, r1	; 18
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <Lcd_Init+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <Lcd_Init+0x18>
  d8:	00 00       	nop
  da:	12 ba       	out	0x12, r1	; 18
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
  e2:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  e6:	8f ea       	ldi	r24, 0xAF	; 175
  e8:	96 e3       	ldi	r25, 0x36	; 54
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <Lcd_Init+0x2a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <Lcd_Init+0x30>
  f0:	00 00       	nop
  f2:	12 ba       	out	0x12, r1	; 18
  f4:	88 e3       	ldi	r24, 0x38	; 56
  f6:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
  fa:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
  fe:	9f ef       	ldi	r25, 0xFF	; 255
 100:	2d ee       	ldi	r18, 0xED	; 237
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	91 50       	subi	r25, 0x01	; 1
 106:	20 40       	sbci	r18, 0x00	; 0
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <Lcd_Init+0x44>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <Lcd_Init+0x4e>
 10e:	00 00       	nop
 110:	12 ba       	out	0x12, r1	; 18
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 118:	0e 94 49 00 	call	0x92	; 0x92 <send_enable>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 122:	8f e1       	ldi	r24, 0x1F	; 31
 124:	9e e4       	ldi	r25, 0x4E	; 78
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <Lcd_Init+0x66>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <Lcd_Init+0x6c>
 12c:	00 00       	nop
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	9e e4       	ldi	r25, 0x4E	; 78
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <Lcd_Init+0x78>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Lcd_Init+0x7e>
 13e:	00 00       	nop
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 146:	8f e1       	ldi	r24, 0x1F	; 31
 148:	9e e4       	ldi	r25, 0x4E	; 78
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <Lcd_Init+0x8a>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <Lcd_Init+0x90>
 150:	00 00       	nop
 152:	8d e0       	ldi	r24, 0x0D	; 13
 154:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <Lcd_Init+0x9c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Lcd_Init+0xa2>
 162:	00 00       	nop
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 16a:	8f e1       	ldi	r24, 0x1F	; 31
 16c:	9e e4       	ldi	r25, 0x4E	; 78
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <Lcd_Init+0xae>
 172:	00 c0       	rjmp	.+0      	; 0x174 <Lcd_Init+0xb4>
 174:	00 00       	nop
 176:	86 e5       	ldi	r24, 0x56	; 86
 178:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 17c:	8f e1       	ldi	r24, 0x1F	; 31
 17e:	9e e4       	ldi	r25, 0x4E	; 78
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <Lcd_Init+0xc0>
 184:	00 c0       	rjmp	.+0      	; 0x186 <Lcd_Init+0xc6>
 186:	00 00       	nop
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <Lcd_Init+0xd2>
 196:	00 c0       	rjmp	.+0      	; 0x198 <Lcd_Init+0xd8>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <Lcd_Out>:

// to show strings
void Lcd_Out(char row, char column, char *text){
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ea 01       	movw	r28, r20
	row-- ;
	column--;
	send_command((0x80 + 0x40 * row)+ column );
 1a2:	90 e4       	ldi	r25, 0x40	; 64
 1a4:	89 9f       	mul	r24, r25
 1a6:	60 0d       	add	r22, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	86 2f       	mov	r24, r22
 1ac:	81 5c       	subi	r24, 0xC1	; 193
 1ae:	0e 94 54 00 	call	0xa8	; 0xa8 <send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	8f ec       	ldi	r24, 0xCF	; 207
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Lcd_Out+0x1a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Lcd_Out+0x20>
 1bc:	00 00       	nop
	_delay_ms(1);
	while(*text){
 1be:	88 81       	ld	r24, Y
 1c0:	88 23       	and	r24, r24
 1c2:	61 f0       	breq	.+24     	; 0x1dc <Lcd_Out+0x40>
 1c4:	21 96       	adiw	r28, 0x01	; 1
		send_data(*text++);
 1c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <send_data>
 1ca:	8f e1       	ldi	r24, 0x1F	; 31
 1cc:	9e e4       	ldi	r25, 0x4E	; 78
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <Lcd_Out+0x32>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <Lcd_Out+0x38>
 1d4:	00 00       	nop
void Lcd_Out(char row, char column, char *text){
	row-- ;
	column--;
	send_command((0x80 + 0x40 * row)+ column );
	_delay_ms(1);
	while(*text){
 1d6:	89 91       	ld	r24, Y+
 1d8:	81 11       	cpse	r24, r1
 1da:	f5 cf       	rjmp	.-22     	; 0x1c6 <Lcd_Out+0x2a>
		send_data(*text++);
		_delay_ms(10);
	}

}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <int_timer1_timer>:
			
    }
}

void int_timer1_timer(){
	TCCR1A = 0x00 ;
 1e2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x04 ;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 34286 ;
 1e8:	8e ee       	ldi	r24, 0xEE	; 238
 1ea:	95 e8       	ldi	r25, 0x85	; 133
 1ec:	9d bd       	out	0x2d, r25	; 45
 1ee:	8c bd       	out	0x2c, r24	; 44

	TIMSK |= (1 << 2); // enable interrupt for timer1
 1f0:	89 b7       	in	r24, 0x39	; 57
 1f2:	84 60       	ori	r24, 0x04	; 4
 1f4:	89 bf       	out	0x39, r24	; 57
	sei();			   // enable interrupts globally
 1f6:	78 94       	sei
 1f8:	08 95       	ret

000001fa <int_timer0_counter>:
}
void int_timer0_counter(){
	PORTB |= (1 << 0);
 1fa:	c0 9a       	sbi	0x18, 0	; 24
	TCCR0 = 0x06 ;
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	83 bf       	out	0x33, r24	; 51

	TIMSK |= (1 << 0); // enable interrupt for timer0
 200:	89 b7       	in	r24, 0x39	; 57
 202:	81 60       	ori	r24, 0x01	; 1
 204:	89 bf       	out	0x39, r24	; 57
	sei();			   // enable interrupts globally
 206:	78 94       	sei
 208:	08 95       	ret

0000020a <main>:
void int_timer1_timer();
void int_timer0_counter();

int main(void)
{
	int_timer1_timer();
 20a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <int_timer1_timer>
	int_timer0_counter() ; 
 20e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <int_timer0_counter>
	Lcd_Init();
 212:	0e 94 60 00 	call	0xc0	; 0xc0 <Lcd_Init>
	Lcd_Out(1 , 2 , "F = ");
 216:	40 e6       	ldi	r20, 0x60	; 96
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 ce 00 	call	0x19c	; 0x19c <Lcd_Out>
	Lcd_Out(2 , 8 , "HZ");
 222:	45 e6       	ldi	r20, 0x65	; 101
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	68 e0       	ldi	r22, 0x08	; 8
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	0e 94 ce 00 	call	0x19c	; 0x19c <Lcd_Out>
 22e:	ff cf       	rjmp	.-2      	; 0x22e <main+0x24>

00000230 <__vector_9>:

	TIMSK |= (1 << 0); // enable interrupt for timer0
	sei();			   // enable interrupts globally

}
ISR (TIMER1_OVF_vect){	
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	ef 93       	push	r30
 250:	ff 93       	push	r31
	value = (volatile uint8_t)TCNT0 ;
 252:	82 b7       	in	r24, 0x32	; 50
 254:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <value>
	f = (value) + 256 * counter ;
 258:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <value>
 25c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <counter>
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	98 2f       	mov	r25, r24
 264:	88 27       	eor	r24, r24
 266:	82 0f       	add	r24, r18
 268:	91 1d       	adc	r25, r1
 26a:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <f+0x1>
 26e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <f>
	itoa(f , f_str , 10);
 272:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <f>
 276:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <f+0x1>
 27a:	4a e0       	ldi	r20, 0x0A	; 10
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	68 e6       	ldi	r22, 0x68	; 104
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <itoa>
	Lcd_Out(2 , 2 , f_str );
 286:	48 e6       	ldi	r20, 0x68	; 104
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 ce 00 	call	0x19c	; 0x19c <Lcd_Out>
	f = 0 ;
 292:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <f+0x1>
 296:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <f>
	counter = 0 ;
 29a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <counter>
	value = 0;
 29e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <value>
	TCNT1 = 34286 ;
 2a2:	8e ee       	ldi	r24, 0xEE	; 238
 2a4:	95 e8       	ldi	r25, 0x85	; 133
 2a6:	9d bd       	out	0x2d, r25	; 45
 2a8:	8c bd       	out	0x2c, r24	; 44
	TCNT0 = 0 ;
 2aa:	12 be       	out	0x32, r1	; 50
	TIFR |= (1 << 0);
 2ac:	88 b7       	in	r24, 0x38	; 56
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	88 bf       	out	0x38, r24	; 56

	//TIMSK &= ~(1 << 2); // disable interrupt for timer1
}
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <__vector_11>:
ISR (TIMER0_OVF_vect){
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	8f 93       	push	r24
	counter++ ;	
 2e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <counter>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <counter>
}
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <itoa>:
 2f6:	45 32       	cpi	r20, 0x25	; 37
 2f8:	51 05       	cpc	r21, r1
 2fa:	20 f4       	brcc	.+8      	; 0x304 <itoa+0xe>
 2fc:	42 30       	cpi	r20, 0x02	; 2
 2fe:	10 f0       	brcs	.+4      	; 0x304 <itoa+0xe>
 300:	0c 94 86 01 	jmp	0x30c	; 0x30c <__itoa_ncheck>
 304:	fb 01       	movw	r30, r22
 306:	10 82       	st	Z, r1
 308:	cb 01       	movw	r24, r22
 30a:	08 95       	ret

0000030c <__itoa_ncheck>:
 30c:	bb 27       	eor	r27, r27
 30e:	4a 30       	cpi	r20, 0x0A	; 10
 310:	31 f4       	brne	.+12     	; 0x31e <__itoa_ncheck+0x12>
 312:	99 23       	and	r25, r25
 314:	22 f4       	brpl	.+8      	; 0x31e <__itoa_ncheck+0x12>
 316:	bd e2       	ldi	r27, 0x2D	; 45
 318:	90 95       	com	r25
 31a:	81 95       	neg	r24
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	0c 94 92 01 	jmp	0x324	; 0x324 <__utoa_common>

00000322 <__utoa_ncheck>:
 322:	bb 27       	eor	r27, r27

00000324 <__utoa_common>:
 324:	fb 01       	movw	r30, r22
 326:	55 27       	eor	r21, r21
 328:	aa 27       	eor	r26, r26
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	aa 1f       	adc	r26, r26
 330:	a4 17       	cp	r26, r20
 332:	10 f0       	brcs	.+4      	; 0x338 <__utoa_common+0x14>
 334:	a4 1b       	sub	r26, r20
 336:	83 95       	inc	r24
 338:	50 51       	subi	r21, 0x10	; 16
 33a:	b9 f7       	brne	.-18     	; 0x32a <__utoa_common+0x6>
 33c:	a0 5d       	subi	r26, 0xD0	; 208
 33e:	aa 33       	cpi	r26, 0x3A	; 58
 340:	08 f0       	brcs	.+2      	; 0x344 <__utoa_common+0x20>
 342:	a9 5d       	subi	r26, 0xD9	; 217
 344:	a1 93       	st	Z+, r26
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	79 f7       	brne	.-34     	; 0x328 <__utoa_common+0x4>
 34a:	b1 11       	cpse	r27, r1
 34c:	b1 93       	st	Z+, r27
 34e:	11 92       	st	Z+, r1
 350:	cb 01       	movw	r24, r22
 352:	0c 94 ab 01 	jmp	0x356	; 0x356 <strrev>

00000356 <strrev>:
 356:	dc 01       	movw	r26, r24
 358:	fc 01       	movw	r30, r24
 35a:	67 2f       	mov	r22, r23
 35c:	71 91       	ld	r23, Z+
 35e:	77 23       	and	r23, r23
 360:	e1 f7       	brne	.-8      	; 0x35a <strrev+0x4>
 362:	32 97       	sbiw	r30, 0x02	; 2
 364:	04 c0       	rjmp	.+8      	; 0x36e <strrev+0x18>
 366:	7c 91       	ld	r23, X
 368:	6d 93       	st	X+, r22
 36a:	70 83       	st	Z, r23
 36c:	62 91       	ld	r22, -Z
 36e:	ae 17       	cp	r26, r30
 370:	bf 07       	cpc	r27, r31
 372:	c8 f3       	brcs	.-14     	; 0x366 <strrev+0x10>
 374:	08 95       	ret

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
