
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000190  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070c  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000617  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d7  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000344  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000266  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <spi_inialize>:
	 x = f_oc / 16 ;  x = x / B_R ; x = x - 1;
	 UBRRL = x ;
}
// master mode : 
void spi_inialize(){
	DDRB =((1 << 4) | (1 << 5) |(1 << 7) ); 	//congigure them as output
  7c:	80 eb       	ldi	r24, 0xB0	; 176
  7e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~ (1 << 6);
  80:	be 98       	cbi	0x17, 6	; 23
	SPCR = ((1<<SPE)|(1<<MSTR)|(1<<SPR0) );
  82:	81 e5       	ldi	r24, 0x51	; 81
  84:	8d b9       	out	0x0d, r24	; 13
  86:	08 95       	ret

00000088 <spi_send>:
}
void spi_send(uint8_t sent_data){
	PORTB &= ~(1 << 4); // initiate the transmission
  88:	c4 98       	cbi	0x18, 4	; 24
	SPDR = sent_data ;
  8a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
  8c:	77 9b       	sbis	0x0e, 7	; 14
  8e:	fe cf       	rjmp	.-4      	; 0x8c <spi_send+0x4>
	PORTB |= (1 << 4); // initiate the transmission
  90:	c4 9a       	sbi	0x18, 4	; 24
  92:	08 95       	ret

00000094 <main>:
}

int main(void)
{
	sei();
  94:	78 94       	sei
// global variables
uint8_t _data ;

void usart_int (uint32_t B_R , uint32_t f_oc) {
	 uint32_t x = 0 ;
	 UCSRB = 0x98 ;
  96:	88 e9       	ldi	r24, 0x98	; 152
  98:	8a b9       	out	0x0a, r24	; 10
	 UCSRC = 0x86 ;
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	 x = f_oc / 16 ;  x = x / B_R ; x = x - 1;
	 UBRRL = x ;
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	89 b9       	out	0x09, r24	; 9

int main(void)
{
	sei();
	usart_int(9600 , 8000000);
	spi_inialize();
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <spi_inialize>
	DDRD |= (1 << 7);
  a6:	8f 9a       	sbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f e3       	ldi	r18, 0x3F	; 63
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x1a>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x24>
  b8:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(1000);
		if (_data == 'o'){PORTD ^= (1<<7);}
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	8f 36       	cpi	r24, 0x6F	; 111
  c0:	99 f7       	brne	.-26     	; 0xa8 <main+0x14>
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	80 58       	subi	r24, 0x80	; 128
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	ef cf       	rjmp	.-34     	; 0xa8 <main+0x14>

000000ca <__vector_13>:
		
    }
}
ISR (USART_RXC_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
    _data = UDR ;
  ec:	8c b1       	in	r24, 0x0c	; 12
  ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	spi_send(_data);
  f2:	0e 94 44 00 	call	0x88	; 0x88 <spi_send>
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
