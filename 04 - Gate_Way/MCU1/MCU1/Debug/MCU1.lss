
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073f  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023f  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_intialize>:
	 uint32_t x = 0 ;
	 UCSRB = 0x18 ;
	 UCSRC = 0x86 ;
	 x = f_oc / 16 ;  x = x / B_R ; x = x - 1;
	 UBRRL = x ;
}
  6c:	86 b7       	in	r24, 0x36	; 54
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	86 bf       	out	0x36, r24	; 54
  72:	11 b8       	out	0x01, r1	; 1
  74:	8d e3       	ldi	r24, 0x3D	; 61
  76:	82 b9       	out	0x02, r24	; 2
  78:	85 ec       	ldi	r24, 0xC5	; 197
  7a:	86 bf       	out	0x36, r24	; 54
  7c:	87 e4       	ldi	r24, 0x47	; 71
  7e:	80 b9       	out	0x00, r24	; 0
  80:	08 95       	ret

00000082 <send_char>:
// this function is to send one character
void send_char(uint8_t _data){
	while (!(UCSRA & (1 << 5))) {}
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <send_char>
	UDR = _data ;
  86:	8c b9       	out	0x0c, r24	; 12
  88:	08 95       	ret

0000008a <main>:
	TWBR = 0x47;
}

void usart_int (uint32_t B_R , uint32_t f_oc) {
	 uint32_t x = 0 ;
	 UCSRB = 0x18 ;
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
	 UCSRC = 0x86 ;
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
	 x = f_oc / 16 ;  x = x / B_R ; x = x - 1;
	 UBRRL = x ;
  92:	83 e3       	ldi	r24, 0x33	; 51
  94:	89 b9       	out	0x09, r24	; 9
}

int main(void)
{
	usart_int(9600 ,8000000 );
	I2C_intialize();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_intialize>
	DDRC &= ~(1 << 2);
  9a:	a2 98       	cbi	0x14, 2	; 20
	DDRC |= (1 << 3);
  9c:	a3 9a       	sbi	0x14, 3	; 20
	sei();
  9e:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		if (!(PINC & (1 << 2))){
  a0:	9a 99       	sbic	0x13, 2	; 19
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f eb       	ldi	r18, 0xBF	; 191
  a6:	84 ed       	ldi	r24, 0xD4	; 212
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x20>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x2a>
  b4:	00 00       	nop
			_delay_ms(600);
			send_char('o');
  b6:	8f e6       	ldi	r24, 0x6F	; 111
  b8:	0e 94 41 00 	call	0x82	; 0x82 <send_char>
  bc:	f1 cf       	rjmp	.-30     	; 0xa0 <main+0x16>

000000be <__vector_19>:
		}
    }
}
ISR(TWI_vect){
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	
	uint8_t x = TWDR ;
  cc:	83 b1       	in	r24, 0x03	; 3
	if (x == 's'){
  ce:	83 37       	cpi	r24, 0x73	; 115
  d0:	51 f4       	brne	.+20     	; 0xe6 <__vector_19+0x28>
		PORTC ^= (1 << 3);
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	88 e0       	ldi	r24, 0x08	; 8
  d6:	89 27       	eor	r24, r25
  d8:	85 bb       	out	0x15, r24	; 21
  da:	87 ea       	ldi	r24, 0xA7	; 167
  dc:	91 e6       	ldi	r25, 0x61	; 97
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <__vector_19+0x20>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <__vector_19+0x26>
  e4:	00 00       	nop
		_delay_ms(100);
	}
	 TWCR |= (1 << 7);
  e6:	86 b7       	in	r24, 0x36	; 54
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	86 bf       	out	0x36, r24	; 54
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
